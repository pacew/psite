#! /usr/bin/env python3

import sys
import os
import pwd
import re
import shlex

import boto3

from pprint import PrettyPrinter
def pprint(val):
    PrettyPrinter().pprint(val)

ec2 = boto3.resource("ec2")
ec2c = ec2.meta.client
r53c = boto3.client('route53')

params = dict()

def find_key_name():
    resp = ec2c.describe_key_pairs(Filters = [{
        'Name': 'tag-key',
        'Values': [ 'main' ]
    }])
    keys = resp['KeyPairs'][0]
    params['key_name'] = keys['KeyName']


def find_security_group():
    resp = ec2c.describe_security_groups(Filters = [{
        'Name': 'group-name',
        'Values': ['stdsg']
    }])
    group = resp['SecurityGroups'][0]
    params['sg_id'] = group['GroupId']

def find_ami():
    resp = ec2c.describe_images(
        Owners=['099720109477'],
        Filters = [
            { 'Name': 'architecture', 'Values': ['x86_64'] },
            { 'Name': 'description', 'Values': ['Canonical, Ubuntu, 20.04*'] },
            { 'Name': 'name', 'Values': ['ubuntu/images/*'] },
            { 'Name': 'state', 'Values': ['available'] },
            { 'Name': 'root-device-type', 'Values': ['ebs'] },
        ]
    )

    imgs = resp['Images']

    if len(imgs) == 0:
        print("can't find ami")
        sys.exit(1)
        
    best = imgs[0]
    for img in resp['Images']:
        if img['CreationDate'] > best['CreationDate']:
            best = img
    ami_id = best['ImageId']
    print(ami_id, best['Description'])
    params['ami_id'] = ami_id

def find_zone(hostname):
    last2 = hostname.split(".")[-2:]
    domain_name = ".".join(last2)

    resp = r53c.list_hosted_zones()
    zones = resp['HostedZones']
    for zone in zones:
        name = zone['Name'].strip(".")
        if name == domain_name:
            return zone['Id']

    print("invalid zone", hostname)
    sys.exit(1)

def lookup_addr_in_route53(hostname):
    zone_id = find_zone(hostname)

    resp = r53c.test_dns_answer(HostedZoneId = zone_id,
                                RecordName = hostname,
                                RecordType = "A")
    data = resp['RecordData']
    if len(data) > 0:
        return data[0]
    return None

def make_eip():
    resp = ec2c.allocate_address(Domain='vpc')
    return resp

def set_route53(hostname, ipaddr):
    zone_id = find_zone(hostname)

    r53c.change_resource_record_sets(
        ChangeBatch={
            'Changes': [
                {
                    'Action': 'CREATE',
                    'ResourceRecordSet': {
                        'Name': hostname,
                        'ResourceRecords': [{'Value': ipaddr,}],
                        'TTL': 60,
                        'Type': 'A',
                    },
                },
            ]},
        HostedZoneId=zone_id)

def find_unused_eip():
    resp = ec2c.describe_addresses ()
    for addr in resp['Addresses']:
        if addr.get("AssociationId") is None:
            return addr
    return None

def find_eip_for_ipaddr(ipaddr):
    resp = ec2c.describe_addresses ()
    for addr in resp['Addresses']:
        if addr['PublicIp'] == ipaddr:
            return addr
    return None

def get_elastic_ip(hostname):
    ipaddr = lookup_addr_in_route53(hostname)

    if ipaddr is None:
        eip = find_unused_eip()
        if eip is None:
            eip = make_eip()
        setdns (hostname, eip)
        return eip

    eip = find_eip_for_ipaddr(ipaddr)
    if eip is None:
        print("{hostname} wants {ipaddr} but there's no eip for that")
        sys.exit(1)
    return eip

def get_tag(item, tag):
    for taginfo in item['Tags']:
        if taginfo['Key'] == tag:
            return taginfo['Value']
    return None

#
# to make a long lived volume, create it in the aws console
# (be user to use the right availability zone for the instance
# you're using).  give it tag Name = hostname
# attach it
# mkfs -t xfs /dev/xvdf
# run blkid to get uuid
# set tag uuid to the uuid
def find_ebs_volume(hostname):
    resp = ec2c.describe_volumes(Filters=[
        {'Name': 'tag:Name', 'Values': [hostname]}
    ])
    vols = resp['Volumes']
    if len(vols) == 0:
        return None
    vol = vols[0]
    params['VolumeId'] = vol['VolumeId']
    params['AvailabilityZone'] = vol['AvailabilityZone']
    params['Attachments'] = vol['Attachments']
    params['vol_uuid'] = get_tag(vol, "uuid")


def make_script(hostname):
    p = pwd.getpwuid(os.getuid())
    aboot_user = p.pw_name
    aboot_gecos = p.pw_gecos.rstrip(",")

    s = list()
    s.append("#! /bin/bash")
    s.append("ABOOT_USER={}".format(shlex.quote(aboot_user)))
    s.append("ABOOT_GECOS={}".format(shlex.quote(aboot_gecos)))
    s.append("ABOOT_HOSTNAME={}".format(shlex.quote(hostname)))

    uuid = params.get('vol_uuid')
    if uuid is not None:
        print("ebs uuid", uuid)
        s.append("ABOOT_EBS_UUID={}".format(shlex.quote(uuid)))

    script = "\n".join(s)
    script += "\n\n"

    with open("aboot") as f:
        script += f.read()

    return script

def launch_instance(hostname):
    place = dict()

    if 'AvailabilityZone' in params:
        place['AvailabilityZone'] = params['AvailabilityZone']

    script = make_script(hostname)
    with open("TMP.script", "w") as f:
        f.write(script)
    
    find_ami()
    find_key_name()
    find_security_group()
    
    print("")
    print("")

    print("placement", place)
    print("ami", params['ami_id'])
    print("launch script in ./TMP.script")
    answer = input(f"launch an instance for {hostname} (y/n)? ")
    if answer != "y":
        print("aborted")
        sys.exit(1)

    inst = ec2c.run_instances(
        ImageId=params['ami_id'],
        InstanceType='t3.small',
        Placement=place,
        KeyName=params['key_name'],
        MaxCount=1,
        MinCount=1,
        SecurityGroupIds=[params['sg_id']],
        UserData=script,
        TagSpecifications=[
            {
                'ResourceType': 'instance',
                'Tags': [
                    {
                        "Key": "Name",
                        "Value": hostname
                    }
                ]
            }
        ]
    )
    return inst


def find_instance(hostname):
    resp = ec2c.describe_instances(Filters=[
        {'Name': 'tag:Name', 'Values': [hostname]}
    ])
    for res in resp['Reservations']:
        for inst in res['Instances']:
            if inst['State']['Name'] == "running":
                return inst
            print("ignoring inst {} {}".format(inst['InstanceId'],
                                               inst['State']['Name']))
    return None

def aserver_up(hostname):
    find_ebs_volume(hostname)

    inst = find_instance(hostname)
    if inst is None:
        print("launching...")
        inst = launch_instance(hostname)
        print("you'll need to run ./aserver later to attach eip")
        sys.exit(0)

    inst_id = inst['InstanceId']
    print("found inst {} {}".format(inst_id, inst['State']['Name']))

    eip = get_elastic_ip(hostname)

    if 'InstanceId' not in eip:
        print("associating eip to inst")
        ec2c.associate_address (AllocationId = eip['AllocationId'],
                                InstanceId = inst_id)


    if len(params['Attachments']) == 0:
        print("attaching volume")
        resp = ec2c.attach_volume(Device="/dev/sdf",
                                  InstanceId=inst_id,
                                  VolumeId=params['VolumeId'])

    ipaddr = eip['PublicIp']
    shortname = hostname.split(".")[0]

    print()
    print("# clean out old host key data with these commands")
    print()
    print(f"ssh-keygen -qR {ipaddr} > /dev/null 2>&1")
    print(f"ssh-keygen -qR {hostname} > /dev/null 2>&1")
    print(f"ssh-keygen -qR {shortname} > /dev/null 2>&1")
    print()

    print(f"try ssh ubuntu@{hostname}")

def aserver_down(hostname):
    inst = find_instance(hostname)
    if inst is None:
        print(f"{hostname} not found")
    else:
        inst_id = inst['InstanceId']
        resp = ec2c.terminate_instances(InstanceIds=[inst_id])
        print("ok")


def main():
    if len(sys.argv) < 2:
        print("usage: aserver hostname [Down]")
        sys.exit (1)

    hostname = sys.argv[1]

    if len(sys.argv) > 2 and sys.argv[2] == "Down":
        aserver_down(hostname)
        sys.exit (0)

    aserver_up(hostname)


if __name__ == "__main__":
    main()
